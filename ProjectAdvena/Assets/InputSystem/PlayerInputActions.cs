//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Stage1"",
            ""id"": ""3164fe4c-d5d3-49aa-a0c7-da5c7e1d04e7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""429f475b-a67c-4967-a36b-29eb4040a087"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1fe04647-a3a5-4dd7-9758-888b60e44ffc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""38d56a47-5eac-42a8-8691-926f05e636eb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e717a28f-fdc0-4c60-9cd5-01d88e90e11d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4555250f-7f94-424a-97e3-11dc4c49e7af"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc1c9a07-bc97-4ed3-8d17-a07e3d4aafb3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d8fcf6d3-f4bc-4e97-a1ea-5cfa28a0c426"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Stage2"",
            ""id"": ""72ecd01b-49f6-4951-aae9-a5dca97d9b2e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bbe14189-c896-4e1e-9454-e30e394812d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""b4470beb-db13-491d-8c96-badc33b1ed0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c8883936-5356-40eb-adef-64c694f6cf47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1ea1518-b05c-4f14-a50b-fd59e71d3ed4"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""40fbc68f-d951-4083-93c3-b9cfb8496e46"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cfb27f63-e77d-40bb-a12b-7d1629c6be64"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ecae379-3c1a-41f3-927d-4a547883e750"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""03d024c6-3327-4ed3-a6e8-f007d31724fe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01a51fcc-b968-4be8-9bb8-9d488cb29d14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3f82ee9e-5244-4600-b95c-18050c8c6afb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ecd41e-8f33-4d4e-81d2-7d2654820454"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0377956-2fc0-49b4-9f89-86ac5e032acf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Stage1
        m_Stage1 = asset.FindActionMap("Stage1", throwIfNotFound: true);
        m_Stage1_Move = m_Stage1.FindAction("Move", throwIfNotFound: true);
        // Stage2
        m_Stage2 = asset.FindActionMap("Stage2", throwIfNotFound: true);
        m_Stage2_Move = m_Stage2.FindAction("Move", throwIfNotFound: true);
        m_Stage2_Run = m_Stage2.FindAction("Run", throwIfNotFound: true);
        m_Stage2_Jump = m_Stage2.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Stage1
    private readonly InputActionMap m_Stage1;
    private IStage1Actions m_Stage1ActionsCallbackInterface;
    private readonly InputAction m_Stage1_Move;
    public struct Stage1Actions
    {
        private @PlayerInputActions m_Wrapper;
        public Stage1Actions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Stage1_Move;
        public InputActionMap Get() { return m_Wrapper.m_Stage1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Stage1Actions set) { return set.Get(); }
        public void SetCallbacks(IStage1Actions instance)
        {
            if (m_Wrapper.m_Stage1ActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Stage1ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Stage1ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Stage1ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Stage1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Stage1Actions @Stage1 => new Stage1Actions(this);

    // Stage2
    private readonly InputActionMap m_Stage2;
    private IStage2Actions m_Stage2ActionsCallbackInterface;
    private readonly InputAction m_Stage2_Move;
    private readonly InputAction m_Stage2_Run;
    private readonly InputAction m_Stage2_Jump;
    public struct Stage2Actions
    {
        private @PlayerInputActions m_Wrapper;
        public Stage2Actions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Stage2_Move;
        public InputAction @Run => m_Wrapper.m_Stage2_Run;
        public InputAction @Jump => m_Wrapper.m_Stage2_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Stage2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Stage2Actions set) { return set.Get(); }
        public void SetCallbacks(IStage2Actions instance)
        {
            if (m_Wrapper.m_Stage2ActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Stage2ActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_Stage2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public Stage2Actions @Stage2 => new Stage2Actions(this);
    public interface IStage1Actions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IStage2Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
